{
  "key": "backendHandlesList",
  "value": [
    {
      "id": "BAC-001",
      "category": "認証",
      "handleName": "ログイン認証",
      "description": "メールアドレスとパスワードによるユーザー認証処理",
      "handleProcedure": "1. リクエストからメールアドレスとパスワードを取得\n2. パスワードのハッシュ化\n3. Supabaseで認証情報を照合\n4. JWTトークンの生成\n5. 認証結果とトークンをレスポンス",
      "fileName": "auth/login.ts",
      "relatedScreen": "SCR-001",
      "relatedFrontendCode": "import { useState } from 'react';\nimport { useRouter } from 'next/router';\nimport Link from 'next/link';\nimport Image from 'next/image';\nimport { FiMail, FiLock, FiEye, FiEyeOff } from 'react-icons/fi';\nimport { supabase } from '@/supabase';\n\nconst Login = () => {\n  const router = useRouter();\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n  const [error, setError] = useState('');\n  const [loading, setLoading] = useState(false);\n  const [showPassword, setShowPassword] = useState(false);\n\n  const handleLogin = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setLoading(true);\n    setError('');\n\n    try {\n      const { data, error } = await supabase.auth.signInWithPassword({\n        email,\n        password,\n      });\n\n      if (error) throw error;\n\n      if (data.user) {\n        router.push('/dashboard');\n      }\n    } catch (error: any) {\n      setError('ログインに失敗しました。メールアドレスとパスワードを確認してください。');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen h-full flex items-center justify-center bg-gradient-to-br from-blue-50 to-blue-100 py-12 px-4 sm:px-6 lg:px-8\">\n      <div className=\"max-w-md w-full space-y-8 bg-white p-8 rounded-xl shadow-lg\">\n        <div className=\"text-center\">\n          <Image\n            src=\"https://placehold.co/200x60\"\n            alt=\"Logo\"\n            width={200}\n            height={60}\n            className=\"mx-auto\"\n          />\n          <h2 className=\"mt-6 text-3xl font-bold text-gray-900\">\n            ログイン\n          </h2>\n          <p className=\"mt-2 text-sm text-gray-600\">\n            社内スキルマッチングプラットフォーム\n          </p>\n        </div>\n\n        <form className=\"mt-8 space-y-6\" onSubmit={handleLogin}>\n          <div className=\"rounded-md shadow-sm space-y-4\">\n            <div className=\"relative\">\n              <label htmlFor=\"email\" className=\"sr-only\">\n                メールアドレス\n              </label>\n              <FiMail className=\"absolute top-3 left-3 text-gray-400\" />\n              <input\n                id=\"email\"\n                name=\"email\"\n                type=\"email\"\n                required\n                value={email}\n                onChange={(e) => setEmail(e.target.value)}\n                className=\"appearance-none relative block w-full pl-10 pr-3 py-2 border border-gray-300 rounded-md placeholder-gray-500 text-gray-900 focus:outline-none focus:ring-blue-500 focus:border-blue-500 focus:z-10 sm:text-sm\"\n                placeholder=\"メールアドレス\"\n              />\n            </div>\n\n            <div className=\"relative\">\n              <label htmlFor=\"password\" className=\"sr-only\">\n                パスワード\n              </label>\n              <FiLock className=\"absolute top-3 left-3 text-gray-400\" />\n              <input\n                id=\"password\"\n                name=\"password\"\n                type={showPassword ? 'text' : 'password'}\n                required\n                value={password}\n                onChange={(e) => setPassword(e.target.value)}\n                className=\"appearance-none relative block w-full pl-10 pr-10 py-2 border border-gray-300 rounded-md placeholder-gray-500 text-gray-900 focus:outline-none focus:ring-blue-500 focus:border-blue-500 focus:z-10 sm:text-sm\"\n                placeholder=\"パスワード\"\n              />\n              <button\n                type=\"button\"\n                onClick={() => setShowPassword(!showPassword)}\n                className=\"absolute top-3 right-3 text-gray-400\"\n              >\n                {showPassword ? <FiEyeOff /> : <FiEye />}\n              </button>\n            </div>\n          </div>\n\n          {error && (\n            <div className=\"bg-red-50 text-red-500 p-3 rounded-md text-sm\">\n              {error}\n            </div>\n          )}\n\n          <div>\n            <button\n              type=\"submit\"\n              disabled={loading}\n              className=\"group relative w-full flex justify-center py-2 px-4 border border-transparent text-sm font-medium rounded-md text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 disabled:opacity-50 disabled:cursor-not-allowed\"\n            >\n              {loading ? 'ログイン中...' : 'ログイン'}\n            </button>\n          </div>\n        </form>\n\n        <div className=\"text-center\">\n          <Link\n            href=\"/password-reset\"\n            className=\"text-sm text-blue-600 hover:text-blue-500\"\n          >\n            パスワードをお忘れの方はこちら\n          </Link>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Login;"
    },
    {
      "id": "BAC-002",
      "category": "AIマッチング",
      "handleName": "スキルベースマッチング処理",
      "description": "課題やアイデアに対する最適な人材のマッチング計算処理",
      "handleProcedure": "1. 必要スキル要件の取得\n2. ユーザースキルデータの取得\n3. マッチングスコアの計算\n4. 類似度に基づくランキング作成\n5. 上位候補者の詳細情報取得\n6. マッチング結果の保存",
      "fileName": "matching/skill-match.ts",
      "relatedScreen": "SCR-009",
      "relatedFrontendCode": "import { useState, useEffect } from 'react';\nimport { useRouter } from 'next/router';\nimport Link from 'next/link';\nimport { FaSearch, FaUser, FaStar, FaBriefcase, FaChartLine } from 'react-icons/fa';\nimport { supabase } from '@/supabase';\n\ntype MatchingResult = {\n  id: string;\n  name: string;\n  department: string;\n  matchScore: number;\n  skills: { name: string; level: number }[];\n};\n\nconst MatchingSearchPage = () => {\n  const router = useRouter();\n  const [searchType, setSearchType] = useState<'skill' | 'idea'>('skill');\n  const [skillKeywords, setSkillKeywords] = useState('');\n  const [minimumLevel, setMinimumLevel] = useState(1);\n  const [department, setDepartment] = useState('');\n  const [matchingResults, setMatchingResults] = useState<MatchingResult[]>([]);\n  const [isLoading, setIsLoading] = useState(false);\n\n  const handleSearch = async () => {\n    setIsLoading(true);\n    try {\n      const { data, error } = await supabase\n        .from('users')\n        .select(`\n          id,\n          name,\n          department,\n          user_skills (\n            skill_id,\n            level\n          )\n        `);\n\n      if (error) throw error;\n\n      // サンプルデータ（実際のAPIレスポンスに合わせて調整）\n      const sampleResults: MatchingResult[] = [\n        {\n          id: '1',\n          name: '山田太郎',\n          department: '開発部',\n          matchScore: 95,\n          skills: [\n            { name: 'TypeScript', level: 4 },\n            { name: 'React', level: 5 },\n          ],\n        },\n        {\n          id: '2',\n          name: '鈴木花子',\n          department: 'デザイン部',\n          matchScore: 88,\n          skills: [\n            { name: 'UI/UX', level: 5 },\n            { name: 'Figma', level: 4 },\n          ],\n        },\n      ];\n\n      setMatchingResults(sampleResults);\n    } catch (error) {\n      console.error('検索エラー:', error);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen h-full bg-gray-50\">\n      {/* サイドバー */}\n      <div className=\"fixed left-0 top-0 h-full w-64 bg-white shadow-lg p-4\">\n        <div className=\"text-2xl font-bold text-blue-600 mb-8\">SkillSync</div>\n        <nav className=\"space-y-4\">\n          <Link href=\"/profile\" className=\"flex items-center space-x-2 text-gray-600 hover:text-blue-600\">\n            <FaUser />\n            <span>プロフィール</span>\n          </Link>\n          <Link href=\"/matching/search\" className=\"flex items-center space-x-2 text-blue-600 font-semibold\">\n            <FaSearch />\n            <span>マッチング検索</span>\n          </Link>\n          <Link href=\"/challenges\" className=\"flex items-center space-x-2 text-gray-600 hover:text-blue-600\">\n            <FaBriefcase />\n            <span>課題一覧</span>\n          </Link>\n          <Link href=\"/analytics\" className=\"flex items-center space-x-2 text-gray-600 hover:text-blue-600\">\n            <FaChartLine />\n            <span>分析</span>\n          </Link>\n        </nav>\n      </div>\n\n      {/* メインコンテンツ */}\n      <div className=\"ml-64 p-8\">\n        <h1 className=\"text-3xl font-bold text-gray-800 mb-8\">マッチング検索</h1>\n\n        {/* 検索フォーム */}\n        <div className=\"bg-white rounded-lg shadow-md p-6 mb-8\">\n          <div className=\"grid grid-cols-2 gap-6 mb-6\">\n            <div>\n              <label className=\"block text-sm font-medium text-gray-700 mb-2\">検索タイプ</label>\n              <select\n                value={searchType}\n                onChange={(e) => setSearchType(e.target.value as 'skill' | 'idea')}\n                className=\"w-full rounded-md border border-gray-300 p-2\"\n              >\n                <option value=\"skill\">スキルベース</option>\n                <option value=\"idea\">アイデアベース</option>\n              </select>\n            </div>\n            <div>\n              <label className=\"block text-sm font-medium text-gray-700 mb-2\">スキルキーワード</label>\n              <input\n                type=\"text\"\n                value={skillKeywords}\n                onChange={(e) => setSkillKeywords(e.target.value)}\n                className=\"w-full rounded-md border border-gray-300 p-2\"\n                placeholder=\"例: TypeScript, React\"\n              />\n            </div>\n          </div>\n          <div className=\"grid grid-cols-2 gap-6 mb-6\">\n            <div>\n              <label className=\"block text-sm font-medium text-gray-700 mb-2\">最低スキルレベル</label>\n              <input\n                type=\"number\"\n                min=\"1\"\n                max=\"5\"\n                value={minimumLevel}\n                onChange={(e) => setMinimumLevel(Number(e.target.value))}\n                className=\"w-full rounded-md border border-gray-300 p-2\"\n              />\n            </div>\n            <div>\n              <label className=\"block text-sm font-medium text-gray-700 mb-2\">部署</label>\n              <input\n                type=\"text\"\n                value={department}\n                onChange={(e) => setDepartment(e.target.value)}\n                className=\"w-full rounded-md border border-gray-300 p-2\"\n                placeholder=\"例: 開発部\"\n              />\n            </div>\n          </div>\n          <button\n            onClick={handleSearch}\n            disabled={isLoading}\n            className=\"w-full bg-blue-600 text-white py-2 rounded-md hover:bg-blue-700 transition-colors\"\n          >\n            {isLoading ? '検索中...' : '検索する'}\n          </button>\n        </div>\n\n        {/* 検索結果 */}\n        <div className=\"space-y-4\">\n          {matchingResults.map((result) => (\n            <div key={result.id} className=\"bg-white rounded-lg shadow-md p-6\">\n              <div className=\"flex justify-between items-start mb-4\">\n                <div>\n                  <h3 className=\"text-xl font-semibold text-gray-800\">{result.name}</h3>\n                  <p className=\"text-gray-600\">{result.department}</p>\n                </div>\n                <div className=\"flex items-center space-x-1\">\n                  <FaStar className=\"text-yellow-400\" />\n                  <span className=\"text-lg font-semibold\">{result.matchScore}%</span>\n                </div>\n              </div>\n              <div className=\"flex flex-wrap gap-2\">\n                {result.skills.map((skill, index) => (\n                  <span\n                    key={index}\n                    className=\"bg-blue-100 text-blue-800 px-3 py-1 rounded-full text-sm\"\n                  >\n                    {skill.name} Lv.{skill.level}\n                  </span>\n                ))}\n              </div>\n              <div className=\"mt-4\">\n                <Link\n                  href={`/profile/${result.id}`}\n                  className=\"text-blue-600 hover:text-blue-800 font-medium\"\n                >\n                  プロフィールを見る →\n                </Link>\n              </div>\n            </div>\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default MatchingSearchPage;"
    },
    {
      "id": "BAC-003",
      "category": "AIマッチング",
      "handleName": "チーム編成最適化処理",
      "description": "プロジェクト要件に基づく最適なチーム編成の計算処理",
      "handleProcedure": "1. プロジェクト要件の分析\n2. 必要スキルセットの抽出\n3. チーム規模に基づく候補者プール作成\n4. チーム構成パターンの生成\n5. 各パターンのスコア計算\n6. 最適な組み合わせの決定",
      "fileName": "matching/team-optimization.ts",
      "relatedScreen": "SCR-010",
      "relatedFrontendCode": "import { useState, useEffect } from 'react';\nimport { useRouter } from 'next/router';\nimport Link from 'next/link';\nimport { supabase } from '@/supabase';\nimport axios from 'axios';\nimport { FaUsers, FaChartLine, FaCheckCircle } from 'react-icons/fa';\nimport { IoMdSettings } from 'react-icons/io';\nimport { BsPersonBadge } from 'react-icons/bs';\n\ntype UserSkill = {\n  id: string;\n  user_id: string;\n  skill_id: string;\n  level: number;\n  years_of_experience: number;\n};\n\ntype User = {\n  id: string;\n  employee_id: string;\n  name: string;\n  department: string;\n  position: string;\n  email: string;\n  hire_date: string;\n  profile_data: any;\n};\n\ntype TeamMember = {\n  user: User;\n  skills: UserSkill[];\n  matchScore: number;\n};\n\nconst TeamBuilding = () => {\n  const router = useRouter();\n  const [projectName, setProjectName] = useState('');\n  const [requiredSkills, setRequiredSkills] = useState<string[]>([]);\n  const [teamSize, setTeamSize] = useState(3);\n  const [suggestedTeam, setSuggestedTeam] = useState<TeamMember[]>([]);\n  const [loading, setLoading] = useState(false);\n  const [skills, setSkills] = useState<string[]>([\n    'JavaScript', 'TypeScript', 'React', 'Node.js', 'Python', 'Java', 'AWS'\n  ]);\n\n  const generateTeam = async () => {\n    setLoading(true);\n    try {\n      const response = await axios.post('/api/matching/team-optimization', {\n        projectName,\n        requiredSkills,\n        teamSize\n      });\n      setSuggestedTeam(response.data.team);\n    } catch (error) {\n      console.error('チーム生成エラー:', error);\n      // サンプルデータ\n      setSuggestedTeam([\n        {\n          user: {\n            id: '1',\n            employee_id: 'EMP001',\n            name: '山田太郎',\n            department: '開発部',\n            position: 'シニアエンジニア',\n            email: 'yamada@example.com',\n            hire_date: '2020-04-01',\n            profile_data: {}\n          },\n          skills: [],\n          matchScore: 0.95\n        },\n        {\n          user: {\n            id: '2',\n            employee_id: 'EMP002',\n            name: '鈴木花子',\n            department: '開発部',\n            position: 'エンジニア',\n            email: 'suzuki@example.com',\n            hire_date: '2021-04-01',\n            profile_data: {}\n          },\n          skills: [],\n          matchScore: 0.88\n        }\n      ]);\n    }\n    setLoading(false);\n  };\n\n  return (\n    <div className=\"min-h-screen h-full bg-gray-50\">\n      <div className=\"flex\">\n        <aside className=\"w-64 h-screen bg-white shadow-lg fixed\">\n          <div className=\"p-4\">\n            <h2 className=\"text-xl font-bold text-gray-800 mb-4\">メニュー</h2>\n            <nav>\n              <Link href=\"/matching/search\" className=\"flex items-center p-2 text-gray-600 hover:bg-blue-50 rounded\">\n                <FaChartLine className=\"mr-2\" />\n                マッチング検索\n              </Link>\n              <Link href=\"/matching/team-building\" className=\"flex items-center p-2 text-blue-600 bg-blue-50 rounded\">\n                <FaUsers className=\"mr-2\" />\n                チーム編成支援\n              </Link>\n            </nav>\n          </div>\n        </aside>\n\n        <main className=\"flex-1 ml-64 p-8\">\n          <h1 className=\"text-2xl font-bold text-gray-800 mb-8\">チーム編成支援</h1>\n\n          <div className=\"bg-white rounded-lg shadow-md p-6 mb-8\">\n            <h2 className=\"text-xl font-semibold mb-4\">プロジェクト要件入力</h2>\n            <div className=\"space-y-4\">\n              <div>\n                <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n                  プロジェクト名\n                </label>\n                <input\n                  type=\"text\"\n                  value={projectName}\n                  onChange={(e) => setProjectName(e.target.value)}\n                  className=\"w-full p-2 border rounded-md\"\n                />\n              </div>\n\n              <div>\n                <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n                  必要スキル\n                </label>\n                <div className=\"flex flex-wrap gap-2\">\n                  {skills.map((skill) => (\n                    <button\n                      key={skill}\n                      onClick={() => {\n                        if (requiredSkills.includes(skill)) {\n                          setRequiredSkills(requiredSkills.filter(s => s !== skill));\n                        } else {\n                          setRequiredSkills([...requiredSkills, skill]);\n                        }\n                      }}\n                      className={`px-3 py-1 rounded-full text-sm ${\n                        requiredSkills.includes(skill)\n                          ? 'bg-blue-600 text-white'\n                          : 'bg-gray-100 text-gray-600'\n                      }`}\n                    >\n                      {skill}\n                    </button>\n                  ))}\n                </div>\n              </div>\n\n              <div>\n                <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n                  チーム規模\n                </label>\n                <select\n                  value={teamSize}\n                  onChange={(e) => setTeamSize(Number(e.target.value))}\n                  className=\"w-full p-2 border rounded-md\"\n                >\n                  {[2, 3, 4, 5, 6].map((size) => (\n                    <option key={size} value={size}>\n                      {size}名\n                    </option>\n                  ))}\n                </select>\n              </div>\n\n              <button\n                onClick={generateTeam}\n                disabled={loading || !projectName || requiredSkills.length === 0}\n                className=\"w-full bg-blue-600 text-white py-2 rounded-md hover:bg-blue-700 disabled:bg-gray-300\"\n              >\n                {loading ? '生成中...' : 'チーム構成を提案'}\n              </button>\n            </div>\n          </div>\n\n          {suggestedTeam.length > 0 && (\n            <div className=\"bg-white rounded-lg shadow-md p-6\">\n              <h2 className=\"text-xl font-semibold mb-4\">推奨チーム構成</h2>\n              <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n                {suggestedTeam.map((member) => (\n                  <div\n                    key={member.user.id}\n                    className=\"border rounded-lg p-4 hover:shadow-md transition-shadow\"\n                  >\n                    <div className=\"flex items-center mb-3\">\n                      <img\n                        src={`https://placehold.co/100x100`}\n                        alt={member.user.name}\n                        className=\"w-12 h-12 rounded-full mr-3\"\n                      />\n                      <div>\n                        <h3 className=\"font-semibold\">{member.user.name}</h3>\n                        <p className=\"text-sm text-gray-600\">{member.user.position}</p>\n                      </div>\n                    </div>\n                    <div className=\"mb-2\">\n                      <div className=\"text-sm text-gray-600\">マッチ度</div>\n                      <div className=\"flex items-center\">\n                        <div className=\"flex-1 bg-gray-200 rounded-full h-2 mr-2\">\n                          <div\n                            className=\"bg-green-500 h-2 rounded-full\"\n                            style={{ width: `${member.matchScore * 100}%` }}\n                          ></div>\n                        </div>\n                        <span className=\"text-sm font-medium\">\n                          {Math.round(member.matchScore * 100)}%\n                        </span>\n                      </div>\n                    </div>\n                    <button className=\"text-blue-600 text-sm hover:underline\">\n                      プロフィールを表示\n                    </button>\n                  </div>\n                ))}\n              </div>\n            </div>\n          )}\n        </main>\n      </div>\n    </div>\n  );\n};\n\nexport default TeamBuilding;"
    },
    {
      "id": "BAC-004",
      "category": "データ分析",
      "handleName": "スキルマップ集計処理",
      "description": "組織全体のスキル分布と傾向を分析する処理",
      "handleProcedure": "1. 全社員のスキルデータ取得\n2. 部門別スキル集計\n3. レベル分布の計算\n4. スキルギャップの分析\n5. 可視化データの生成",
      "fileName": "analytics/skill-map-aggregate.ts",
      "relatedScreen": "SCR-013",
      "relatedFrontendCode": "import { useState, useEffect } from 'react';\nimport { useRouter } from 'next/router';\nimport Link from 'next/link';\nimport { supabase } from '@/supabase';\nimport { FaChartPie, FaUsers, FaBuilding, FaDownload } from 'react-icons/fa';\nimport {\n  Chart as ChartJS,\n  CategoryScale,\n  LinearScale,\n  BarElement,\n  Title,\n  Tooltip,\n  Legend,\n  RadialLinearScale,\n  PointElement,\n  LineElement,\n  Filler,\n} from 'chart.js';\nimport { Bar, Radar } from 'react-chartjs-2';\n\nChartJS.register(\n  CategoryScale,\n  LinearScale,\n  BarElement,\n  Title,\n  Tooltip,\n  Legend,\n  RadialLinearScale,\n  PointElement,\n  LineElement,\n  Filler\n);\n\nexport default function SkillMap() {\n  const router = useRouter();\n  const [department, setDepartment] = useState('all');\n  const [skillCategory, setSkillCategory] = useState('all');\n  const [visualizationType, setVisualizationType] = useState('radar');\n  const [departments, setDepartments] = useState([]);\n  const [skillCategories, setSkillCategories] = useState([]);\n  const [skillData, setSkillData] = useState(null);\n\n  useEffect(() => {\n    fetchData();\n  }, [department, skillCategory]);\n\n  const fetchData = async () => {\n    try {\n      const { data: users, error: usersError } = await supabase\n        .from('users')\n        .select('*');\n      \n      const { data: skills, error: skillsError } = await supabase\n        .from('skills')\n        .select('*');\n      \n      const { data: userSkills, error: userSkillsError } = await supabase\n        .from('user_skills')\n        .select('*');\n\n      if (usersError || skillsError || userSkillsError) throw new Error('データの取得に失敗しました');\n\n      // 部門リストの作成\n      const uniqueDepartments = [...new Set(users.map(user => user.department))];\n      setDepartments(uniqueDepartments);\n\n      // スキルカテゴリリストの作成\n      const uniqueCategories = [...new Set(skills.map(skill => skill.category))];\n      setSkillCategories(uniqueCategories);\n\n      // データの集計処理\n      const processedData = processSkillData(users, skills, userSkills);\n      setSkillData(processedData);\n    } catch (error) {\n      console.error('Error fetching data:', error);\n      // サンプルデータの設定\n      setSkillData(getSampleData());\n    }\n  };\n\n  const processSkillData = (users, skills, userSkills) => {\n    // 実際のデータ処理ロジックをここに実装\n    return {\n      labels: ['プログラミング', 'データベース', 'インフラ', 'マネジメント', 'コミュニケーション'],\n      datasets: [{\n        label: '平均スキルレベル',\n        data: [4, 3, 5, 2, 4],\n        backgroundColor: 'rgba(44, 82, 130, 0.2)',\n        borderColor: 'rgba(44, 82, 130, 1)',\n        borderWidth: 2,\n      }]\n    };\n  };\n\n  const getSampleData = () => {\n    return {\n      labels: ['プログラミング', 'データベース', 'インフラ', 'マネジメント', 'コミュニケーション'],\n      datasets: [{\n        label: '平均スキルレベル',\n        data: [4, 3, 5, 2, 4],\n        backgroundColor: 'rgba(44, 82, 130, 0.2)',\n        borderColor: 'rgba(44, 82, 130, 1)',\n        borderWidth: 2,\n      }]\n    };\n  };\n\n  const handleExport = () => {\n    // レポート出力処理\n    console.log('レポート出力');\n  };\n\n  return (\n    <div className=\"min-h-screen h-full bg-gray-50\">\n      <div className=\"flex\">\n        {/* サイドバー */}\n        <div className=\"w-64 min-h-screen bg-[#2C5282] p-4\">\n          <div className=\"text-white text-xl font-bold mb-8\">スキル分析</div>\n          <nav>\n            <Link href=\"/analytics/dashboard\" className=\"flex items-center text-white mb-4 hover:bg-[#4299E1] p-2 rounded\">\n              <FaChartPie className=\"mr-2\" />\n              ダッシュボード\n            </Link>\n            <Link href=\"/analytics/skill-map\" className=\"flex items-center text-white mb-4 bg-[#4299E1] p-2 rounded\">\n              <FaUsers className=\"mr-2\" />\n              スキルマップ\n            </Link>\n          </nav>\n        </div>\n\n        {/* メインコンテンツ */}\n        <div className=\"flex-1 p-8\">\n          <h1 className=\"text-2xl font-bold mb-6\">スキルマップ分析</h1>\n\n          {/* フィルター */}\n          <div className=\"bg-white p-4 rounded-lg shadow mb-6\">\n            <div className=\"grid grid-cols-3 gap-4\">\n              <div>\n                <label className=\"block text-sm font-medium text-gray-700 mb-2\">部門</label>\n                <select\n                  value={department}\n                  onChange={(e) => setDepartment(e.target.value)}\n                  className=\"w-full border border-gray-300 rounded-md p-2\"\n                >\n                  <option value=\"all\">全部門</option>\n                  {departments.map((dept, index) => (\n                    <option key={index} value={dept}>{dept}</option>\n                  ))}\n                </select>\n              </div>\n              <div>\n                <label className=\"block text-sm font-medium text-gray-700 mb-2\">スキルカテゴリ</label>\n                <select\n                  value={skillCategory}\n                  onChange={(e) => setSkillCategory(e.target.value)}\n                  className=\"w-full border border-gray-300 rounded-md p-2\"\n                >\n                  <option value=\"all\">全カテゴリ</option>\n                  {skillCategories.map((category, index) => (\n                    <option key={index} value={category}>{category}</option>\n                  ))}\n                </select>\n              </div>\n              <div>\n                <label className=\"block text-sm font-medium text-gray-700 mb-2\">可視化タイプ</label>\n                <select\n                  value={visualizationType}\n                  onChange={(e) => setVisualizationType(e.target.value)}\n                  className=\"w-full border border-gray-300 rounded-md p-2\"\n                >\n                  <option value=\"radar\">レーダーチャート</option>\n                  <option value=\"bar\">棒グラフ</option>\n                </select>\n              </div>\n            </div>\n          </div>\n\n          {/* チャート表示 */}\n          <div className=\"bg-white p-6 rounded-lg shadow mb-6\">\n            <div className=\"h-[400px] flex items-center justify-center\">\n              {skillData && visualizationType === 'radar' ? (\n                <Radar data={skillData} options={{\n                  scales: {\n                    r: {\n                      min: 0,\n                      max: 5,\n                      ticks: {\n                        stepSize: 1\n                      }\n                    }\n                  }\n                }} />\n              ) : skillData && (\n                <Bar data={skillData} options={{\n                  scales: {\n                    y: {\n                      beginAtZero: true,\n                      max: 5\n                    }\n                  }\n                }} />\n              )}\n            </div>\n          </div>\n\n          {/* アクション */}\n          <div className=\"flex justify-end\">\n            <button\n              onClick={handleExport}\n              className=\"flex items-center bg-[#2C5282] text-white px-4 py-2 rounded hover:bg-[#4299E1]\"\n            >\n              <FaDownload className=\"mr-2\" />\n              レポート出力\n            </button>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}"
    },
    {
      "id": "BAC-005",
      "category": "データ分析",
      "handleName": "シナジー効果分析処理",
      "description": "部門間協業の効果測定と分析を行う処理",
      "handleProcedure": "1. 協業プロジェクトデータの取得\n2. KPI達成度の計算\n3. 部門間連携度の分析\n4. 時系列での効果測定\n5. 分析レポートデータの生成",
      "fileName": "analytics/synergy-analysis.ts",
      "relatedScreen": "SCR-014",
      "relatedFrontendCode": "import { useState, useEffect } from 'react';\nimport { supabase } from '@/supabase';\nimport Link from 'next/link';\nimport { FaChartLine, FaUsers, FaRegChartBar, FaCog } from 'react-icons/fa';\nimport { Line, Bar } from 'react-chartjs-2';\nimport {\n  Chart as ChartJS,\n  CategoryScale,\n  LinearScale,\n  PointElement,\n  LineElement,\n  BarElement,\n  Title,\n  Tooltip,\n  Legend,\n} from 'chart.js';\n\nChartJS.register(\n  CategoryScale,\n  LinearScale,\n  PointElement,\n  LineElement,\n  BarElement,\n  Title,\n  Tooltip,\n  Legend\n);\n\nconst SynergyAnalysis = () => {\n  const [period, setPeriod] = useState('1month');\n  const [departments, setDepartments] = useState<string[]>([]);\n  const [selectedDepartments, setSelectedDepartments] = useState<string[]>([]);\n  const [kpiData, setKpiData] = useState(null);\n  const [synergyData, setSynergyData] = useState(null);\n\n  useEffect(() => {\n    fetchDepartments();\n    fetchAnalyticsData();\n  }, [period, selectedDepartments]);\n\n  const fetchDepartments = async () => {\n    try {\n      const { data, error } = await supabase\n        .from('users')\n        .select('department')\n        .distinct();\n      \n      if (error) throw error;\n      \n      const uniqueDepartments = [...new Set(data.map(item => item.department))];\n      setDepartments(uniqueDepartments);\n    } catch (error) {\n      console.error('Error fetching departments:', error);\n      setDepartments(['営業部', '開発部', '人事部', '経営企画部']);\n    }\n  };\n\n  const fetchAnalyticsData = async () => {\n    try {\n      const { data, error } = await supabase\n        .from('matches')\n        .select('*');\n\n      if (error) throw error;\n\n      // サンプルデータの生成\n      const sampleKpiData = {\n        labels: ['1月', '2月', '3月', '4月', '5月', '6月'],\n        datasets: [{\n          label: 'KPI達成率',\n          data: [65, 72, 78, 85, 82, 90],\n          borderColor: 'rgb(75, 192, 192)',\n          tension: 0.1\n        }]\n      };\n\n      const sampleSynergyData = {\n        labels: ['営業×開発', '開発×人事', '人事×企画', '企画×営業'],\n        datasets: [{\n          label: 'シナジー効果スコア',\n          data: [85, 65, 75, 80],\n          backgroundColor: 'rgba(54, 162, 235, 0.5)',\n        }]\n      };\n\n      setKpiData(sampleKpiData);\n      setSynergyData(sampleSynergyData);\n    } catch (error) {\n      console.error('Error fetching analytics data:', error);\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen h-full bg-gray-50\">\n      <div className=\"flex\">\n        {/* Sidebar */}\n        <div className=\"w-64 min-h-screen bg-[#2C5282] text-white p-4\">\n          <div className=\"mb-8\">\n            <h2 className=\"text-xl font-bold mb-4\">データ分析</h2>\n            <nav>\n              <Link href=\"/analytics/dashboard\" className=\"flex items-center p-2 hover:bg-[#4299E1] rounded\">\n                <FaChartLine className=\"mr-2\" /> ダッシュボード\n              </Link>\n              <Link href=\"/analytics/synergy\" className=\"flex items-center p-2 bg-[#4299E1] rounded\">\n                <FaUsers className=\"mr-2\" /> シナジー効果\n              </Link>\n              <Link href=\"/analytics/skills\" className=\"flex items-center p-2 hover:bg-[#4299E1] rounded\">\n                <FaRegChartBar className=\"mr-2\" /> スキル分析\n              </Link>\n              <Link href=\"/analytics/settings\" className=\"flex items-center p-2 hover:bg-[#4299E1] rounded\">\n                <FaCog className=\"mr-2\" /> 設定\n              </Link>\n            </nav>\n          </div>\n        </div>\n\n        {/* Main Content */}\n        <div className=\"flex-1 p-8\">\n          <h1 className=\"text-2xl font-bold mb-6\">シナジー効果分析</h1>\n\n          {/* Filter Controls */}\n          <div className=\"bg-white p-4 rounded-lg shadow mb-6\">\n            <div className=\"grid grid-cols-3 gap-4\">\n              <div>\n                <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                  分析期間\n                </label>\n                <select\n                  className=\"w-full border rounded-md p-2\"\n                  value={period}\n                  onChange={(e) => setPeriod(e.target.value)}\n                >\n                  <option value=\"1month\">1ヶ月</option>\n                  <option value=\"3months\">3ヶ月</option>\n                  <option value=\"6months\">6ヶ月</option>\n                  <option value=\"1year\">1年</option>\n                </select>\n              </div>\n              <div>\n                <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                  対象部門\n                </label>\n                <select\n                  className=\"w-full border rounded-md p-2\"\n                  multiple\n                  value={selectedDepartments}\n                  onChange={(e) => {\n                    const values = Array.from(e.target.selectedOptions, option => option.value);\n                    setSelectedDepartments(values);\n                  }}\n                >\n                  {departments.map((dept) => (\n                    <option key={dept} value={dept}>{dept}</option>\n                  ))}\n                </select>\n              </div>\n            </div>\n          </div>\n\n          {/* Analytics Charts */}\n          <div className=\"grid grid-cols-2 gap-6\">\n            <div className=\"bg-white p-4 rounded-lg shadow\">\n              <h3 className=\"text-lg font-semibold mb-4\">KPI達成状況</h3>\n              {kpiData && <Line data={kpiData} />}\n            </div>\n            <div className=\"bg-white p-4 rounded-lg shadow\">\n              <h3 className=\"text-lg font-semibold mb-4\">部門間シナジー効果</h3>\n              {synergyData && <Bar data={synergyData} />}\n            </div>\n          </div>\n\n          {/* Summary Cards */}\n          <div className=\"grid grid-cols-3 gap-6 mt-6\">\n            <div className=\"bg-white p-4 rounded-lg shadow\">\n              <h4 className=\"text-lg font-semibold mb-2\">総合スコア</h4>\n              <p className=\"text-3xl font-bold text-[#4299E1]\">85.2</p>\n              <p className=\"text-sm text-gray-500\">前月比 +5.3%</p>\n            </div>\n            <div className=\"bg-white p-4 rounded-lg shadow\">\n              <h4 className=\"text-lg font-semibold mb-2\">協業プロジェクト数</h4>\n              <p className=\"text-3xl font-bold text-[#4299E1]\">24</p>\n              <p className=\"text-sm text-gray-500\">前月比 +3</p>\n            </div>\n            <div className=\"bg-white p-4 rounded-lg shadow\">\n              <h4 className=\"text-lg font-semibold mb-2\">生産性向上率</h4>\n              <p className=\"text-3xl font-bold text-[#4299E1]\">12.8%</p>\n              <p className=\"text-sm text-gray-500\">前月比 +2.1%</p>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default SynergyAnalysis;"
    },
    {
      "id": "BAC-006",
      "category": "バッチ処理",
      "handleName": "スキル更新リマインド処理",
      "description": "定期的なスキル更新を促すリマインド通知の送信処理",
      "handleProcedure": "1. 最終更新日の確認\n2. 更新期限超過ユーザーの抽出\n3. リマインドメールテンプレート作成\n4. メール送信処理\n5. 通知履歴の記録",
      "fileName": "batch/skill-update-reminder.ts",
      "relatedScreen": "SCR-004",
      "relatedFrontendCode": "import { useState, useEffect } from 'react';\nimport { useRouter } from 'next/router';\nimport Link from 'next/link';\nimport { supabase } from '@/supabase';\nimport { FaSearch, FaPlus, FaFilter, FaStar } from 'react-icons/fa';\nimport { BiCategoryAlt } from 'react-icons/bi';\n\ntype Skill = {\n  id: string;\n  name: string;\n  category: string;\n  level?: number;\n  years_of_experience?: number;\n};\n\nexport default function SkillList() {\n  const router = useRouter();\n  const [skills, setSkills] = useState<Skill[]>([]);\n  const [filteredSkills, setFilteredSkills] = useState<Skill[]>([]);\n  const [searchQuery, setSearchQuery] = useState('');\n  const [selectedCategory, setSelectedCategory] = useState('all');\n  const [categories, setCategories] = useState<string[]>([]);\n\n  useEffect(() => {\n    fetchSkills();\n  }, []);\n\n  const fetchSkills = async () => {\n    try {\n      const { data: skillsData, error } = await supabase\n        .from('skills')\n        .select(`\n          id,\n          name,\n          category,\n          user_skills (\n            level,\n            years_of_experience\n          )\n        `);\n\n      if (error) throw error;\n\n      const formattedSkills = skillsData.map(skill => ({\n        ...skill,\n        level: skill.user_skills[0]?.level || 0,\n        years_of_experience: skill.user_skills[0]?.years_of_experience || 0\n      }));\n\n      setSkills(formattedSkills);\n      setFilteredSkills(formattedSkills);\n      \n      const uniqueCategories = [...new Set(skillsData.map(skill => skill.category))];\n      setCategories(uniqueCategories);\n    } catch (error) {\n      console.error('Error fetching skills:', error);\n      // サンプルデータの表示\n      const sampleSkills = [\n        { id: '1', name: 'JavaScript', category: 'プログラミング', level: 4, years_of_experience: 3 },\n        { id: '2', name: 'Python', category: 'プログラミング', level: 3, years_of_experience: 2 },\n        { id: '3', name: 'Project Management', category: 'マネジメント', level: 5, years_of_experience: 5 },\n      ];\n      setSkills(sampleSkills);\n      setFilteredSkills(sampleSkills);\n      setCategories(['プログラミング', 'マネジメント']);\n    }\n  };\n\n  const handleSearch = (query: string) => {\n    setSearchQuery(query);\n    filterSkills(query, selectedCategory);\n  };\n\n  const handleCategoryChange = (category: string) => {\n    setSelectedCategory(category);\n    filterSkills(searchQuery, category);\n  };\n\n  const filterSkills = (query: string, category: string) => {\n    let filtered = skills;\n    \n    if (query) {\n      filtered = filtered.filter(skill =>\n        skill.name.toLowerCase().includes(query.toLowerCase())\n      );\n    }\n\n    if (category !== 'all') {\n      filtered = filtered.filter(skill => skill.category === category);\n    }\n\n    setFilteredSkills(filtered);\n  };\n\n  const renderStars = (level: number) => {\n    return [...Array(5)].map((_, index) => (\n      <FaStar\n        key={index}\n        className={`inline ${\n          index < (level || 0) ? 'text-yellow-400' : 'text-gray-300'\n        }`}\n      />\n    ));\n  };\n\n  return (\n    <div className=\"min-h-screen h-full bg-gray-50\">\n      <div className=\"container mx-auto px-4 py-8\">\n        <div className=\"mb-8 flex justify-between items-center\">\n          <h1 className=\"text-3xl font-bold text-gray-800\">スキル一覧</h1>\n          <Link\n            href=\"/skills/new\"\n            className=\"bg-blue-600 hover:bg-blue-700 text-white px-6 py-2 rounded-lg flex items-center gap-2\"\n          >\n            <FaPlus /> スキル登録\n          </Link>\n        </div>\n\n        <div className=\"bg-white rounded-lg shadow-md p-6 mb-8\">\n          <div className=\"flex flex-col md:flex-row gap-4 mb-6\">\n            <div className=\"flex-1\">\n              <div className=\"relative\">\n                <input\n                  type=\"text\"\n                  placeholder=\"スキルを検索...\"\n                  className=\"w-full pl-10 pr-4 py-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                  value={searchQuery}\n                  onChange={(e) => handleSearch(e.target.value)}\n                />\n                <FaSearch className=\"absolute left-3 top-3 text-gray-400\" />\n              </div>\n            </div>\n            <div className=\"md:w-64\">\n              <div className=\"relative\">\n                <select\n                  className=\"w-full pl-10 pr-4 py-2 border rounded-lg appearance-none focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                  value={selectedCategory}\n                  onChange={(e) => handleCategoryChange(e.target.value)}\n                >\n                  <option value=\"all\">すべてのカテゴリー</option>\n                  {categories.map(category => (\n                    <option key={category} value={category}>{category}</option>\n                  ))}\n                </select>\n                <BiCategoryAlt className=\"absolute left-3 top-3 text-gray-400\" />\n                <FaFilter className=\"absolute right-3 top-3 text-gray-400\" />\n              </div>\n            </div>\n          </div>\n\n          <div className=\"overflow-x-auto\">\n            <table className=\"w-full\">\n              <thead className=\"bg-gray-50\">\n                <tr>\n                  <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                    スキル名\n                  </th>\n                  <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                    カテゴリー\n                  </th>\n                  <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                    レベル\n                  </th>\n                  <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                    経験年数\n                  </th>\n                </tr>\n              </thead>\n              <tbody className=\"bg-white divide-y divide-gray-200\">\n                {filteredSkills.map((skill) => (\n                  <tr key={skill.id} className=\"hover:bg-gray-50\">\n                    <td className=\"px-6 py-4 whitespace-nowrap\">\n                      <div className=\"text-sm font-medium text-gray-900\">\n                        {skill.name}\n                      </div>\n                    </td>\n                    <td className=\"px-6 py-4 whitespace-nowrap\">\n                      <span className=\"px-2 inline-flex text-xs leading-5 font-semibold rounded-full bg-blue-100 text-blue-800\">\n                        {skill.category}\n                      </span>\n                    </td>\n                    <td className=\"px-6 py-4 whitespace-nowrap\">\n                      {renderStars(skill.level || 0)}\n                    </td>\n                    <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-500\">\n                      {skill.years_of_experience} 年\n                    </td>\n                  </tr>\n                ))}\n              </tbody>\n            </table>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}"
    },
    {
      "id": "BAC-007",
      "category": "データ分析",
      "handleName": "人材活用状況分析処理",
      "description": "社員の活用状況と成長度を分析する処理",
      "handleProcedure": "1. 活動データの収集\n2. スキル成長率の計算\n3. 部門別活用度の分析\n4. 成長指標の算出\n5. レポートデータの生成",
      "fileName": "analytics/talent-utilization.ts",
      "relatedScreen": "SCR-015",
      "relatedFrontendCode": "import { useEffect, useState } from 'react';\nimport { supabase } from '@/supabase';\nimport Link from 'next/link';\nimport {\n  FaChartLine,\n  FaUsers,\n  FaFileAlt,\n  FaFilter,\n  FaDownload,\n  FaSidebar,\n} from 'react-icons/fa';\nimport {\n  LineChart,\n  Line,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n  Legend,\n  ResponsiveContainer,\n  BarChart,\n  Bar,\n} from 'recharts';\n\ntype UserData = {\n  id: string;\n  name: string;\n  department: string;\n  position: string;\n  skillGrowth: number;\n  utilizationRate: number;\n};\n\nconst TalentReport = () => {\n  const [users, setUsers] = useState<UserData[]>([]);\n  const [selectedDepartment, setSelectedDepartment] = useState('全部門');\n  const [period, setPeriod] = useState('6');\n  const [isSidebarOpen, setIsSidebarOpen] = useState(true);\n\n  const sampleData = [\n    { month: '1月', 活用率: 65, 成長度: 72 },\n    { month: '2月', 活用率: 68, 成長度: 75 },\n    { month: '3月', 活用率: 75, 成長度: 78 },\n    { month: '4月', 活用率: 78, 成長度: 80 },\n    { month: '5月', 活用率: 82, 成長度: 83 },\n    { month: '6月', 活用率: 85, 成長度: 87 },\n  ];\n\n  const departmentData = [\n    { department: '営業部', 活用率: 85, 成長度: 87 },\n    { department: '開発部', 活用率: 90, 成長度: 85 },\n    { department: '人事部', 活用率: 75, 成長度: 80 },\n    { department: '企画部', 活用率: 82, 成長度: 78 },\n  ];\n\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const { data: usersData, error } = await supabase\n          .from('users')\n          .select('*');\n\n        if (error) throw error;\n\n        // サンプルデータ加工処理\n        const processedData = usersData?.map(user => ({\n          id: user.id,\n          name: user.name,\n          department: user.department,\n          position: user.position,\n          skillGrowth: Math.floor(Math.random() * 30) + 70,\n          utilizationRate: Math.floor(Math.random() * 30) + 70,\n        })) || [];\n\n        setUsers(processedData);\n      } catch (error) {\n        console.error('データ取得エラー:', error);\n      }\n    };\n\n    fetchData();\n  }, []);\n\n  const handleExportReport = () => {\n    alert('レポートが出力されました');\n  };\n\n  return (\n    <div className=\"min-h-screen h-full bg-gray-50 flex\">\n      {/* サイドバー */}\n      <div\n        className={`bg-[#2C5282] text-white h-screen fixed left-0 ${\n          isSidebarOpen ? 'w-64' : 'w-20'\n        } transition-all duration-300`}\n      >\n        <div className=\"p-4\">\n          <div className=\"flex items-center justify-between\">\n            <h2 className={`${isSidebarOpen ? 'block' : 'hidden'} font-bold`}>\n              人材活用システム\n            </h2>\n            <button onClick={() => setIsSidebarOpen(!isSidebarOpen)}>\n              <FaSidebar />\n            </button>\n          </div>\n          <nav className=\"mt-8\">\n            <Link\n              href=\"/analytics/talent-report\"\n              className=\"flex items-center gap-3 p-3 rounded hover:bg-[#4299E1] transition-colors\"\n            >\n              <FaChartLine />\n              {isSidebarOpen && <span>人材活用レポート</span>}\n            </Link>\n            {/* 他のナビゲーションリンク */}\n          </nav>\n        </div>\n      </div>\n\n      {/* メインコンテンツ */}\n      <div\n        className={`flex-1 ${\n          isSidebarOpen ? 'ml-64' : 'ml-20'\n        } transition-all duration-300`}\n      >\n        <div className=\"p-8\">\n          <div className=\"flex justify-between items-center mb-8\">\n            <h1 className=\"text-2xl font-bold text-gray-800\">人材活用レポート</h1>\n            <button\n              onClick={handleExportReport}\n              className=\"flex items-center gap-2 bg-[#2C5282] text-white px-4 py-2 rounded hover:bg-[#4299E1] transition-colors\"\n            >\n              <FaDownload />\n              レポート出力\n            </button>\n          </div>\n\n          {/* フィルター部分 */}\n          <div className=\"bg-white p-6 rounded-lg shadow-md mb-8\">\n            <div className=\"flex items-center gap-6\">\n              <div className=\"flex items-center gap-2\">\n                <FaFilter className=\"text-gray-500\" />\n                <select\n                  value={selectedDepartment}\n                  onChange={(e) => setSelectedDepartment(e.target.value)}\n                  className=\"border rounded p-2\"\n                >\n                  <option value=\"全部門\">全部門</option>\n                  <option value=\"営業部\">営業部</option>\n                  <option value=\"開発部\">開発部</option>\n                  <option value=\"人事部\">人事部</option>\n                </select>\n              </div>\n              <div className=\"flex items-center gap-2\">\n                <span className=\"text-gray-600\">期間:</span>\n                <select\n                  value={period}\n                  onChange={(e) => setPeriod(e.target.value)}\n                  className=\"border rounded p-2\"\n                >\n                  <option value=\"3\">3ヶ月</option>\n                  <option value=\"6\">6ヶ月</option>\n                  <option value=\"12\">12ヶ月</option>\n                </select>\n              </div>\n            </div>\n          </div>\n\n          {/* グラフ表示部分 */}\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-8 mb-8\">\n            <div className=\"bg-white p-6 rounded-lg shadow-md\">\n              <h3 className=\"text-lg font-semibold mb-4\">月次推移</h3>\n              <div className=\"h-[400px]\">\n                <ResponsiveContainer width=\"100%\" height=\"100%\">\n                  <LineChart data={sampleData}>\n                    <CartesianGrid strokeDasharray=\"3 3\" />\n                    <XAxis dataKey=\"month\" />\n                    <YAxis />\n                    <Tooltip />\n                    <Legend />\n                    <Line\n                      type=\"monotone\"\n                      dataKey=\"活用率\"\n                      stroke=\"#2C5282\"\n                      strokeWidth={2}\n                    />\n                    <Line\n                      type=\"monotone\"\n                      dataKey=\"成長度\"\n                      stroke=\"#48BB78\"\n                      strokeWidth={2}\n                    />\n                  </LineChart>\n                </ResponsiveContainer>\n              </div>\n            </div>\n\n            <div className=\"bg-white p-6 rounded-lg shadow-md\">\n              <h3 className=\"text-lg font-semibold mb-4\">部門別分析</h3>\n              <div className=\"h-[400px]\">\n                <ResponsiveContainer width=\"100%\" height=\"100%\">\n                  <BarChart data={departmentData}>\n                    <CartesianGrid strokeDasharray=\"3 3\" />\n                    <XAxis dataKey=\"department\" />\n                    <YAxis />\n                    <Tooltip />\n                    <Legend />\n                    <Bar dataKey=\"活用率\" fill=\"#2C5282\" />\n                    <Bar dataKey=\"成長度\" fill=\"#48BB78\" />\n                  </BarChart>\n                </ResponsiveContainer>\n              </div>\n            </div>\n          </div>\n\n          {/* 個人別分析表 */}\n          <div className=\"bg-white p-6 rounded-lg shadow-md\">\n            <h3 className=\"text-lg font-semibold mb-4\">個人別分析</h3>\n            <div className=\"overflow-x-auto\">\n              <table className=\"min-w-full\">\n                <thead className=\"bg-gray-50\">\n                  <tr>\n                    <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                      名前\n                    </th>\n                    <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                      部署\n                    </th>\n                    <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                      役職\n                    </th>\n                    <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                      スキル成長率\n                    </th>\n                    <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                      活用率\n                    </th>\n                  </tr>\n                </thead>\n                <tbody className=\"bg-white divide-y divide-gray-200\">\n                  {users.map((user) => (\n                    <tr key={user.id} className=\"hover:bg-gray-50\">\n                      <td className=\"px-6 py-4 whitespace-nowrap\">\n                        {user.name}\n                      </td>\n                      <td className=\"px-6 py-4 whitespace-nowrap\">\n                        {user.department}\n                      </td>\n                      <td className=\"px-6 py-4 whitespace-nowrap\">\n                        {user.position}\n                      </td>\n                      <td className=\"px-6 py-4 whitespace-nowrap\">\n                        {user.skillGrowth}%\n                      </td>\n                      <td className=\"px-6 py-4 whitespace-nowrap\">\n                        {user.utilizationRate}%\n                      </td>\n                    </tr>\n                  ))}\n                </tbody>\n              </table>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default TalentReport;"
    },
    {
      "id": "BAC-008",
      "category": "データ同期",
      "handleName": "人事データベース同期処理",
      "description": "外部人事システムとのデータ同期処理",
      "handleProcedure": "1. 人事システムからデータ取得\n2. データフォーマットの変換\n3. 差分チェック\n4. データの更新/追加\n5. 同期ログの記録",
      "fileName": "sync/hr-data-sync.ts",
      "relatedScreen": "SCR-002",
      "relatedFrontendCode": "import { useEffect, useState } from 'react'\nimport { supabase } from '@/supabase'\nimport Link from 'next/link'\nimport { FiEdit, FiSearch, FiFilter, FiChevronLeft, FiChevronRight } from 'react-icons/fi'\nimport { BiSortAlt2 } from 'react-icons/bi'\n\ntype Profile = {\n  id: string\n  name: string\n  department: string\n  position: string\n  email: string\n  profile_data: {\n    avatar_url?: string\n  }\n}\n\nconst ProfileList = () => {\n  const [profiles, setProfiles] = useState<Profile[]>([])\n  const [searchTerm, setSearchTerm] = useState('')\n  const [currentPage, setCurrentPage] = useState(1)\n  const [sortField, setSortField] = useState<keyof Profile>('name')\n  const [sortDirection, setSortDirection] = useState<'asc' | 'desc'>('asc')\n  const [departmentFilter, setDepartmentFilter] = useState('')\n  \n  const itemsPerPage = 10\n\n  useEffect(() => {\n    fetchProfiles()\n  }, [])\n\n  const fetchProfiles = async () => {\n    try {\n      const { data, error } = await supabase\n        .from('users')\n        .select('id, name, department, position, email, profile_data')\n\n      if (error) throw error\n      setProfiles(data || [])\n    } catch (error) {\n      console.error('Error fetching profiles:', error)\n      // サンプルデータ\n      setProfiles([\n        {\n          id: '1',\n          name: '山田太郎',\n          department: '開発部',\n          position: 'シニアエンジニア',\n          email: 'yamada@example.com',\n          profile_data: { avatar_url: 'https://placehold.co/100x100' }\n        },\n        // ... その他のサンプルデータ\n      ])\n    }\n  }\n\n  const filteredProfiles = profiles\n    .filter(profile => \n      profile.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      profile.email.toLowerCase().includes(searchTerm.toLowerCase())\n    )\n    .filter(profile => \n      !departmentFilter || profile.department === departmentFilter\n    )\n    .sort((a, b) => {\n      const aValue = a[sortField]\n      const bValue = b[sortField]\n      return sortDirection === 'asc' \n        ? String(aValue).localeCompare(String(bValue))\n        : String(bValue).localeCompare(String(aValue))\n    })\n\n  const totalPages = Math.ceil(filteredProfiles.length / itemsPerPage)\n  const paginatedProfiles = filteredProfiles.slice(\n    (currentPage - 1) * itemsPerPage,\n    currentPage * itemsPerPage\n  )\n\n  const departments = Array.from(new Set(profiles.map(p => p.department)))\n\n  const handleSort = (field: keyof Profile) => {\n    if (field === sortField) {\n      setSortDirection(sortDirection === 'asc' ? 'desc' : 'asc')\n    } else {\n      setSortField(field)\n      setSortDirection('asc')\n    }\n  }\n\n  return (\n    <div className=\"min-h-screen h-full bg-gray-50\">\n      <div className=\"max-w-7xl mx-auto py-6 px-4 sm:px-6 lg:px-8\">\n        <div className=\"mb-8\">\n          <h1 className=\"text-2xl font-bold text-gray-900\">プロフィール一覧</h1>\n        </div>\n\n        <div className=\"bg-white rounded-lg shadow p-6 mb-6\">\n          <div className=\"flex flex-wrap gap-4 mb-6\">\n            <div className=\"flex-1\">\n              <div className=\"relative\">\n                <FiSearch className=\"absolute left-3 top-1/2 -translate-y-1/2 text-gray-400\" />\n                <input\n                  type=\"text\"\n                  placeholder=\"検索...\"\n                  className=\"w-full pl-10 pr-4 py-2 border rounded-md\"\n                  value={searchTerm}\n                  onChange={(e) => setSearchTerm(e.target.value)}\n                />\n              </div>\n            </div>\n            <div className=\"w-64\">\n              <select\n                className=\"w-full p-2 border rounded-md\"\n                value={departmentFilter}\n                onChange={(e) => setDepartmentFilter(e.target.value)}\n              >\n                <option value=\"\">部署で絞り込み</option>\n                {departments.map(dept => (\n                  <option key={dept} value={dept}>{dept}</option>\n                ))}\n              </select>\n            </div>\n          </div>\n\n          <div className=\"overflow-x-auto\">\n            <table className=\"min-w-full divide-y divide-gray-200\">\n              <thead className=\"bg-gray-50\">\n                <tr>\n                  <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                    プロフィール\n                  </th>\n                  {['department', 'position', 'email'].map((field) => (\n                    <th\n                      key={field}\n                      className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider cursor-pointer\"\n                      onClick={() => handleSort(field as keyof Profile)}\n                    >\n                      <div className=\"flex items-center\">\n                        {field === 'department' ? '部署' : field === 'position' ? '役職' : 'メールアドレス'}\n                        <BiSortAlt2 className=\"ml-1\" />\n                      </div>\n                    </th>\n                  ))}\n                  <th className=\"px-6 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                    アクション\n                  </th>\n                </tr>\n              </thead>\n              <tbody className=\"bg-white divide-y divide-gray-200\">\n                {paginatedProfiles.map((profile) => (\n                  <tr key={profile.id}>\n                    <td className=\"px-6 py-4 whitespace-nowrap\">\n                      <div className=\"flex items-center\">\n                        <div className=\"flex-shrink-0 h-10 w-10\">\n                          <img\n                            className=\"h-10 w-10 rounded-full\"\n                            src={profile.profile_data?.avatar_url || \"https://placehold.co/100x100\"}\n                            alt={profile.name}\n                          />\n                        </div>\n                        <div className=\"ml-4\">\n                          <div className=\"text-sm font-medium text-gray-900\">{profile.name}</div>\n                        </div>\n                      </div>\n                    </td>\n                    <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-500\">\n                      {profile.department}\n                    </td>\n                    <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-500\">\n                      {profile.position}\n                    </td>\n                    <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-500\">\n                      {profile.email}\n                    </td>\n                    <td className=\"px-6 py-4 whitespace-nowrap text-right text-sm font-medium\">\n                      <Link href={`/profiles/${profile.id}/edit`} className=\"text-blue-600 hover:text-blue-900\">\n                        <FiEdit className=\"inline-block\" /> 編集\n                      </Link>\n                    </td>\n                  </tr>\n                ))}\n              </tbody>\n            </table>\n          </div>\n\n          <div className=\"flex items-center justify-between mt-6\">\n            <div className=\"flex items-center\">\n              <span className=\"text-sm text-gray-700\">\n                全{filteredProfiles.length}件中 {(currentPage - 1) * itemsPerPage + 1} - {Math.min(currentPage * itemsPerPage, filteredProfiles.length)}件を表示\n              </span>\n            </div>\n            <div className=\"flex items-center space-x-2\">\n              <button\n                onClick={() => setCurrentPage(prev => Math.max(prev - 1, 1))}\n                disabled={currentPage === 1}\n                className=\"px-3 py-2 border rounded-md hover:bg-gray-50 disabled:opacity-50\"\n              >\n                <FiChevronLeft />\n              </button>\n              <button\n                onClick={() => setCurrentPage(prev => Math.min(prev + 1, totalPages))}\n                disabled={currentPage === totalPages}\n                className=\"px-3 py-2 border rounded-md hover:bg-gray-50 disabled:opacity-50\"\n              >\n                <FiChevronRight />\n              </button>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default ProfileList"
    },
    {
      "id": "BAC-009",
      "category": "データ分析",
      "handleName": "スキルギャップ分析処理",
      "description": "組織の必要スキルと現状のギャップを分析する処理",
      "handleProcedure": "1. 必要スキル要件の取得\n2. 現状スキルレベルの集計\n3. ギャップ分析の実行\n4. 優先度の計算\n5. 育成施策の提案生成",
      "fileName": "analytics/skill-gap-analysis.ts",
      "relatedScreen": "SCR-019",
      "relatedFrontendCode": "import { useState, useEffect } from 'react';\nimport { NextPage } from 'next';\nimport Link from 'next/link';\nimport { supabase } from '@/supabase';\nimport { FaChartLine, FaGraduationCap, FaUserCog } from 'react-icons/fa';\nimport { BiMenuAltLeft } from 'react-icons/bi';\nimport { \n  Chart as ChartJS, \n  CategoryScale,\n  LinearScale,\n  BarElement,\n  Title,\n  Tooltip,\n  Legend,\n  RadialLinearScale,\n  PointElement,\n  LineElement,\n  Filler,\n} from 'chart.js';\nimport { Bar, Radar } from 'react-chartjs-2';\n\nChartJS.register(\n  CategoryScale,\n  LinearScale,\n  BarElement,\n  RadialLinearScale,\n  PointElement,\n  LineElement,\n  Filler,\n  Title,\n  Tooltip,\n  Legend\n);\n\ntype Skill = {\n  id: string;\n  name: string;\n  category: string;\n};\n\ntype UserSkill = {\n  id: string;\n  user_id: string;\n  skill_id: string;\n  level: number;\n  years_of_experience: number;\n};\n\nconst SkillGapAnalysis: NextPage = () => {\n  const [skills, setSkills] = useState<Skill[]>([]);\n  const [userSkills, setUserSkills] = useState<UserSkill[]>([]);\n  const [isSidebarOpen, setIsSidebarOpen] = useState(false);\n\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const { data: skillsData, error: skillsError } = await supabase\n          .from('skills')\n          .select('*');\n\n        const { data: userSkillsData, error: userSkillsError } = await supabase\n          .from('user_skills')\n          .select('*');\n\n        if (skillsError || userSkillsError) throw new Error('データの取得に失敗しました');\n\n        setSkills(skillsData || []);\n        setUserSkills(userSkillsData || []);\n      } catch (error) {\n        console.error('Error fetching data:', error);\n        // サンプルデータをセット\n        setSkills([\n          { id: '1', name: 'JavaScript', category: 'プログラミング' },\n          { id: '2', name: 'Python', category: 'プログラミング' },\n          { id: '3', name: 'データ分析', category: 'アナリティクス' },\n        ]);\n        setUserSkills([\n          { id: '1', user_id: '1', skill_id: '1', level: 3, years_of_experience: 2 },\n          { id: '2', user_id: '1', skill_id: '2', level: 4, years_of_experience: 3 },\n          { id: '3', user_id: '1', skill_id: '3', level: 2, years_of_experience: 1 },\n        ]);\n      }\n    };\n\n    fetchData();\n  }, []);\n\n  const gapData = {\n    labels: skills.map(skill => skill.name),\n    datasets: [\n      {\n        label: '必要スキルレベル',\n        data: skills.map(() => 5),\n        backgroundColor: 'rgba(66, 153, 225, 0.5)',\n      },\n      {\n        label: '現在のスキルレベル',\n        data: skills.map(skill => {\n          const userSkill = userSkills.find(us => us.skill_id === skill.id);\n          return userSkill?.level || 0;\n        }),\n        backgroundColor: 'rgba(72, 187, 120, 0.5)',\n      },\n    ],\n  };\n\n  const radarData = {\n    labels: skills.map(skill => skill.name),\n    datasets: [\n      {\n        label: 'スキルギャップ',\n        data: skills.map(skill => {\n          const userSkill = userSkills.find(us => us.skill_id === skill.id);\n          return 5 - (userSkill?.level || 0);\n        }),\n        backgroundColor: 'rgba(66, 153, 225, 0.2)',\n        borderColor: 'rgba(66, 153, 225, 1)',\n        borderWidth: 1,\n      },\n    ],\n  };\n\n  return (\n    <div className=\"min-h-screen h-full bg-gray-50\">\n      {/* Sidebar */}\n      <div\n        className={`fixed top-0 left-0 h-full bg-white shadow-lg transition-transform duration-300 transform ${\n          isSidebarOpen ? 'translate-x-0' : '-translate-x-full'\n        } z-50 w-64`}\n      >\n        <div className=\"p-4\">\n          <h2 className=\"text-xl font-bold text-gray-800 mb-4\">メニュー</h2>\n          <nav>\n            <Link href=\"/analytics/dashboard\" className=\"block py-2 px-4 text-gray-700 hover:bg-gray-100 rounded\">\n              ダッシュボード\n            </Link>\n            <Link href=\"/analytics/skill-map\" className=\"block py-2 px-4 text-gray-700 hover:bg-gray-100 rounded\">\n              スキルマップ\n            </Link>\n            <Link href=\"/analytics/synergy\" className=\"block py-2 px-4 text-gray-700 hover:bg-gray-100 rounded\">\n              シナジー分析\n            </Link>\n            <Link href=\"/analytics/talent-report\" className=\"block py-2 px-4 text-gray-700 hover:bg-gray-100 rounded\">\n              人材活用レポート\n            </Link>\n          </nav>\n        </div>\n      </div>\n\n      {/* Main Content */}\n      <div className=\"p-6\">\n        <button\n          onClick={() => setIsSidebarOpen(!isSidebarOpen)}\n          className=\"fixed top-4 left-4 z-50 p-2 rounded-md bg-white shadow-md\"\n        >\n          <BiMenuAltLeft size={24} />\n        </button>\n\n        <div className=\"max-w-7xl mx-auto\">\n          <h1 className=\"text-3xl font-bold text-gray-800 mb-8\">スキルギャップ分析</h1>\n\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n            {/* ギャップ分析チャート */}\n            <div className=\"bg-white p-6 rounded-lg shadow-md\">\n              <h2 className=\"text-xl font-semibold mb-4 flex items-center\">\n                <FaChartLine className=\"mr-2\" />\n                スキルレベル比較\n              </h2>\n              <Bar data={gapData} />\n            </div>\n\n            {/* レーダーチャート */}\n            <div className=\"bg-white p-6 rounded-lg shadow-md\">\n              <h2 className=\"text-xl font-semibold mb-4 flex items-center\">\n                <FaUserCog className=\"mr-2\" />\n                ギャップ分布\n              </h2>\n              <Radar data={radarData} />\n            </div>\n\n            {/* 育成施策提案 */}\n            <div className=\"lg:col-span-2 bg-white p-6 rounded-lg shadow-md\">\n              <h2 className=\"text-xl font-semibold mb-4 flex items-center\">\n                <FaGraduationCap className=\"mr-2\" />\n                推奨育成施策\n              </h2>\n              <div className=\"space-y-4\">\n                {skills.map((skill) => {\n                  const userSkill = userSkills.find(us => us.skill_id === skill.id);\n                  const gap = 5 - (userSkill?.level || 0);\n                  if (gap <= 0) return null;\n                  \n                  return (\n                    <div key={skill.id} className=\"border-l-4 border-blue-500 pl-4\">\n                      <h3 className=\"font-semibold text-lg\">{skill.name}</h3>\n                      <p className=\"text-gray-600\">\n                        優先度: {gap >= 3 ? '高' : gap >= 2 ? '中' : '低'}\n                      </p>\n                      <p className=\"text-gray-600\">\n                        推奨アクション: {\n                          gap >= 3 ? '集中的なトレーニングプログラムへの参加を推奨' :\n                          gap >= 2 ? 'オンライン学習コースの受講を推奨' :\n                          'セルフラーニング教材の活用を推奨'\n                        }\n                      </p>\n                    </div>\n                  );\n                })}\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default SkillGapAnalysis;"
    },
    {
      "id": "BAC-010",
      "handleName": "アクセス権限検証処理",
      "category": "セキュリティ",
      "description": "ユーザーのアクセス権限を検証する処理",
      "handleProcedure": "1. リクエストからユーザー情報取得\n2. 権限設定の取得\n3. アクセス可能範囲の確認\n4. 権限レベルの検証\n5. アクセス可否の判定",
      "fileName": "auth/access-validation.ts",
      "relatedScreen": "SCR-020",
      "relatedFrontendCode": "import { useState, useEffect } from 'react';\nimport { NextPage } from 'next';\nimport { useRouter } from 'next/router';\nimport Link from 'next/link';\nimport { supabase } from '@/supabase';\nimport { FiUsers, FiSettings, FiSave, FiSearch } from 'react-icons/fi';\nimport { BiGroup } from 'react-icons/bi';\nimport { MdSecurity } from 'react-icons/md';\n\ntype User = {\n  id: string;\n  employee_id: string;\n  name: string;\n  department: string;\n  position: string;\n  email: string;\n  access_rights?: {\n    admin: boolean;\n    user_management: boolean;\n    skill_management: boolean;\n    challenge_management: boolean;\n    idea_management: boolean;\n  };\n};\n\nconst AccessControl: NextPage = () => {\n  const [users, setUsers] = useState<User[]>([]);\n  const [selectedUser, setSelectedUser] = useState<User | null>(null);\n  const [searchTerm, setSearchTerm] = useState('');\n  const [loading, setLoading] = useState(false);\n  const [message, setMessage] = useState('');\n  const router = useRouter();\n\n  useEffect(() => {\n    fetchUsers();\n  }, []);\n\n  const fetchUsers = async () => {\n    try {\n      setLoading(true);\n      const { data, error } = await supabase.from('users').select('*');\n      if (error) throw error;\n      setUsers(data || []);\n    } catch (error) {\n      console.error('Error fetching users:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleUserSelect = (user: User) => {\n    setSelectedUser(user);\n  };\n\n  const handleAccessRightChange = (right: string) => {\n    if (!selectedUser) return;\n    setSelectedUser({\n      ...selectedUser,\n      access_rights: {\n        ...selectedUser.access_rights,\n        [right]: !selectedUser.access_rights?.[right as keyof typeof selectedUser.access_rights],\n      },\n    });\n  };\n\n  const saveAccessRights = async () => {\n    if (!selectedUser) return;\n    try {\n      setLoading(true);\n      const { error } = await supabase\n        .from('users')\n        .update({ access_rights: selectedUser.access_rights })\n        .eq('id', selectedUser.id);\n      \n      if (error) throw error;\n      setMessage('権限設定を保存しました');\n      setTimeout(() => setMessage(''), 3000);\n    } catch (error) {\n      console.error('Error saving access rights:', error);\n      setMessage('エラーが発生しました');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const filteredUsers = users.filter(user =>\n    user.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\n    user.employee_id.toLowerCase().includes(searchTerm.toLowerCase())\n  );\n\n  return (\n    <div className=\"min-h-screen h-full bg-gray-50\">\n      <div className=\"flex\">\n        {/* Sidebar */}\n        <div className=\"w-64 min-h-screen bg-[#2C5282] text-white p-4\">\n          <div className=\"text-2xl font-bold mb-8\">システム管理</div>\n          <nav>\n            <Link href=\"/admin/dashboard\" className=\"flex items-center p-3 hover:bg-[#4299E1] rounded\">\n              <FiSettings className=\"mr-2\" />\n              ダッシュボード\n            </Link>\n            <Link href=\"/admin/access-control\" className=\"flex items-center p-3 bg-[#4299E1] rounded\">\n              <MdSecurity className=\"mr-2\" />\n              アクセス権限設定\n            </Link>\n            <Link href=\"/admin/users\" className=\"flex items-center p-3 hover:bg-[#4299E1] rounded\">\n              <FiUsers className=\"mr-2\" />\n              ユーザー管理\n            </Link>\n          </nav>\n        </div>\n\n        {/* Main Content */}\n        <div className=\"flex-1 p-8\">\n          <h1 className=\"text-2xl font-bold mb-6\">アクセス権限設定</h1>\n\n          {/* Search Bar */}\n          <div className=\"mb-6\">\n            <div className=\"relative\">\n              <input\n                type=\"text\"\n                placeholder=\"ユーザーを検索...\"\n                className=\"w-full p-3 pl-10 rounded-lg border\"\n                value={searchTerm}\n                onChange={(e) => setSearchTerm(e.target.value)}\n              />\n              <FiSearch className=\"absolute left-3 top-3.5 text-gray-400\" />\n            </div>\n          </div>\n\n          {message && (\n            <div className=\"mb-4 p-3 bg-green-100 text-green-700 rounded\">\n              {message}\n            </div>\n          )}\n\n          <div className=\"grid grid-cols-12 gap-6\">\n            {/* User List */}\n            <div className=\"col-span-4\">\n              <div className=\"bg-white rounded-lg shadow p-4\">\n                <h2 className=\"text-lg font-semibold mb-4\">ユーザー一覧</h2>\n                <div className=\"space-y-2 max-h-[600px] overflow-y-auto\">\n                  {filteredUsers.map(user => (\n                    <div\n                      key={user.id}\n                      className={`p-3 rounded cursor-pointer hover:bg-gray-50 ${\n                        selectedUser?.id === user.id ? 'bg-blue-50 border border-blue-200' : ''\n                      }`}\n                      onClick={() => handleUserSelect(user)}\n                    >\n                      <div className=\"font-semibold\">{user.name}</div>\n                      <div className=\"text-sm text-gray-600\">{user.department}</div>\n                    </div>\n                  ))}\n                </div>\n              </div>\n            </div>\n\n            {/* Access Rights Matrix */}\n            <div className=\"col-span-8\">\n              {selectedUser ? (\n                <div className=\"bg-white rounded-lg shadow p-6\">\n                  <div className=\"flex justify-between items-center mb-6\">\n                    <h2 className=\"text-lg font-semibold\">権限設定: {selectedUser.name}</h2>\n                    <button\n                      onClick={saveAccessRights}\n                      disabled={loading}\n                      className=\"flex items-center px-4 py-2 bg-[#2C5282] text-white rounded hover:bg-[#4299E1] disabled:opacity-50\"\n                    >\n                      <FiSave className=\"mr-2\" />\n                      保存\n                    </button>\n                  </div>\n\n                  <div className=\"space-y-4\">\n                    <div className=\"flex items-center p-3 bg-gray-50 rounded\">\n                      <input\n                        type=\"checkbox\"\n                        checked={selectedUser.access_rights?.admin || false}\n                        onChange={() => handleAccessRightChange('admin')}\n                        className=\"mr-3\"\n                      />\n                      <div>\n                        <div className=\"font-semibold\">システム管理者</div>\n                        <div className=\"text-sm text-gray-600\">すべての機能にアクセス可能</div>\n                      </div>\n                    </div>\n\n                    <div className=\"flex items-center p-3 bg-gray-50 rounded\">\n                      <input\n                        type=\"checkbox\"\n                        checked={selectedUser.access_rights?.user_management || false}\n                        onChange={() => handleAccessRightChange('user_management')}\n                        className=\"mr-3\"\n                      />\n                      <div>\n                        <div className=\"font-semibold\">ユーザー管理</div>\n                        <div className=\"text-sm text-gray-600\">ユーザー情報の編集・管理</div>\n                      </div>\n                    </div>\n\n                    <div className=\"flex items-center p-3 bg-gray-50 rounded\">\n                      <input\n                        type=\"checkbox\"\n                        checked={selectedUser.access_rights?.skill_management || false}\n                        onChange={() => handleAccessRightChange('skill_management')}\n                        className=\"mr-3\"\n                      />\n                      <div>\n                        <div className=\"font-semibold\">スキル管理</div>\n                        <div className=\"text-sm text-gray-600\">スキル情報の編集・管理</div>\n                      </div>\n                    </div>\n\n                    <div className=\"flex items-center p-3 bg-gray-50 rounded\">\n                      <input\n                        type=\"checkbox\"\n                        checked={selectedUser.access_rights?.challenge_management || false}\n                        onChange={() => handleAccessRightChange('challenge_management')}\n                        className=\"mr-3\"\n                      />\n                      <div>\n                        <div className=\"font-semibold\">課題管理</div>\n                        <div className=\"text-sm text-gray-600\">課題情報の編集・管理</div>\n                      </div>\n                    </div>\n\n                    <div className=\"flex items-center p-3 bg-gray-50 rounded\">\n                      <input\n                        type=\"checkbox\"\n                        checked={selectedUser.access_rights?.idea_management || false}\n                        onChange={() => handleAccessRightChange('idea_management')}\n                        className=\"mr-3\"\n                      />\n                      <div>\n                        <div className=\"font-semibold\">アイデア管理</div>\n                        <div className=\"text-sm text-gray-600\">アイデア情報の編集・管理</div>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              ) : (\n                <div className=\"bg-white rounded-lg shadow p-6 text-center text-gray-500\">\n                  ユーザーを選択して権限を設定してください\n                </div>\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default AccessControl;"
    }
  ]
}
